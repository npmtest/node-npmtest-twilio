{"/home/travis/build/npmtest/node-npmtest-twilio/test.js":"/* istanbul instrument in package npmtest_twilio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twilio/lib.npmtest_twilio.js":"/* istanbul instrument in package npmtest_twilio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_twilio = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_twilio = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-twilio/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-twilio && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_twilio */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_twilio\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_twilio.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_twilio.rollup.js'] =\n            local.assetsDict['/assets.npmtest_twilio.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_twilio.__dirname + '/lib.npmtest_twilio.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/index.js":"/**\n @module twilio\n\n A helper library for interaction with the Twilio REST API,\n generation of TwiML markup, and creation of capability tokens for\n use with the Twilio Client SDK.\n */\n\nvar webhooks = require('./webhooks'),\n    RestClient = require('./RestClient'),\n    IpMessagingClient = require('./IpMessagingClient'),\n    PricingClient = require('./PricingClient'),\n    MonitorClient = require('./MonitorClient'),\n    TaskRouterClient = require('./TaskRouterClient'),\n    LookupsClient = require('./LookupsClient'),\n    TrunkingClient = require('./TrunkingClient');\n\n//Shorthand to automatically create a RestClient\nfunction initializer(sid, tkn, options) {\n    return new RestClient(sid, tkn, options);\n}\n\n//Main functional components of the Twilio module\ninitializer.RestClient = RestClient;\ninitializer.PricingClient = PricingClient;\ninitializer.MonitorClient = MonitorClient;\ninitializer.TaskRouterClient = TaskRouterClient;\ninitializer.IpMessagingClient = IpMessagingClient;\ninitializer.LookupsClient = LookupsClient;\ninitializer.TrunkingClient = TrunkingClient;\ninitializer.AccessToken = require('./AccessToken');\ninitializer.Capability = require('./Capability');\ninitializer.TaskRouterCapability = require('./TaskRouterCapability');\ninitializer.TaskRouterWorkerCapability = require('./TaskRouterWorkerCapability');\ninitializer.TaskRouterWorkspaceCapability = require('./TaskRouterWorkspaceCapability');\ninitializer.TaskRouterTaskQueueCapability = require('./TaskRouterTaskQueueCapability');\ninitializer.TwimlResponse = require('./TwimlResponse');\n\n// Seup webhook helper functionality\ninitializer.validateRequest = webhooks.validateRequest;\ninitializer.validateExpressRequest = webhooks.validateExpressRequest;\ninitializer.webhook = webhooks.webhook;\n\n//public module interface is a function, which passes through to RestClient constructor\nmodule.exports = initializer;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/webhooks.js":"var crypto = require('crypto'),\n    _ = require('underscore'),\n    scmp = require('scmp'),\n    url = require('url');\n\n/**\n Utility function to validate an incoming request is indeed from Twilio\n\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {string} twilioHeader - The value of the X-Twilio-Signature header from the request\n @param {string} url - The full URL (with query string) you configured to handle this request\n @param {object} params - the parameters sent with this request\n */\nexports.validateRequest = function(authToken, twilioHeader, url, params) {\n    Object.keys(params).sort().forEach(function(key, i) {\n        url = url + key + params[key];\n    });\n\n    return scmp(twilioHeader, crypto.createHmac('sha1', authToken).update(new Buffer(url, 'utf-8')).digest('Base64'));\n};\n\n/**\n Utility function to validate an incoming request is indeed from Twilio (for use with express).\n adapted from https://github.com/crabasa/twiliosig\n\n @param {object} request - An expressjs request object (http://expressjs.com/api.html#req.params)\n @param {string} authToken - The auth token, as seen in the Twilio portal\n @param {object} options - options for request validation:\n    - webhookUrl: The full URL (with query string) you used to configure the webhook with Twilio - overrides host/protocol options\n    - host: manually specify the host name used by Twilio in a number's webhook config\n    - protocol: manually specify the protocol used by Twilio in a number's webhook config\n */\nexports.validateExpressRequest = function(request, authToken, opts) {\n    var options = opts||{}, webhookUrl;\n    if (options.url) {\n        // Let the user specify the full URL\n        webhookUrl = options.url;\n    } else {\n        // Use configured host/protocol, or infer based on request\n        var protocol = options.protocol||request.protocol;\n        var host = options.host||request.headers.host;\n        webhookUrl = url.format({\n            protocol: protocol,\n            host: host,\n            pathname: request.originalUrl\n        });\n    }\n    \n    return exports.validateRequest(\n        authToken, \n        request.header('X-Twilio-Signature'), \n        webhookUrl, \n        request.body||{}\n    );\n};\n\n/**\nExpress middleware to accompany a Twilio webhook. Provides Twilio\nrequest validation, and makes the response a little more friendly for our\nTwiML generator.  Request validation requires the express.urlencoded middleware\nto have been applied (e.g. app.use(express.urlencoded()); in your app config).\n\nOptions:\n- validate: {Boolean} whether or not the middleware should validate the request\n    came from Twilio.  Default true. If the request does not originate from\n    Twilio, we will return a text body and a 403.  If there is no configured\n    auth token and validate=true, this is an error condition, so we will return\n    a 500.\n- includeHelpers: {Boolean} add helpers to the response object to improve support\n    for XML (TwiML) rendering.  Default true.\n- host: manually specify the host name used by Twilio in a number's webhook config\n- protocol: manually specify the protocol used by Twilio in a number's webhook config\n\nReturns a middleware function.\n\nExamples:\nvar webhookMiddleware = twilio.webhook();\nvar webhookMiddleware = twilio.webhook('asdha9dhjasd'); //init with auth token\nvar webhookMiddleware = twilio.webhook({\n    validate:false // don't attempt request validation\n});\nvar webhookMiddleware = twilio.webhook({\n    host: 'hook.twilio.com',\n    protocol: 'https'\n});\n */\nexports.webhook = function() {\n    var opts = {\n        validate:true,\n        includeHelpers:true\n    };\n\n    // Process arguments\n    var tokenString;\n    for (var i = 0, l = arguments.length; i<l; i++) {\n        var arg = arguments[i];\n        if (typeof arg === 'string') {\n            tokenString = arg;\n        } else {\n            opts = _.extend(opts, arg);\n        }\n    }\n\n    // set auth token from input or environment variable\n    opts.authToken = tokenString ? tokenString : process.env.TWILIO_AUTH_TOKEN;\n\n    // Create middleware function\n    return function hook(request, response, next) {\n        // Add helpers, unless disabled\n        if (opts.includeHelpers) {\n            var oldSend = response.send;\n            response.send = function() {\n                // This is a special TwiML-aware version of send.  If we detect\n                // A twiml response object, we'll set the content-type and \n                // automatically call .toString()\n                if (arguments.length == 1 && arguments[0].legalNodes) {\n                    response.type('text/xml');\n                    oldSend.call(response,arguments[0].toString());\n                } else {\n                    // Continue with old version of send\n                    oldSend.apply(response,arguments);\n                }\n            };\n        }\n\n        // Do validation if requested\n        if (opts.validate) {\n            // Check for a valid auth token\n            if (!opts.authToken) {\n                console.error('[Twilio]: Error - Twilio auth token is required for webhook request validation.');\n                response\n                    .type('text/plain')\n                    .status(500)\n                    .send('Webhook Error - we attempted to validate this request without first configuring our auth token.');\n            } else {\n                // Check that the request originated from Twilio\n                valid = exports.validateExpressRequest(request, opts.authToken, {\n                    url: opts.url,\n                    host: opts.host,\n                    protocol: opts.protocol\n                });\n                if (valid) {\n                    next();\n                } else {\n                    return response\n                        .type('text/plain')\n                        .status(403)\n                        .send('Twilio Request Validation Failed.');\n                }\n            }\n        } else {\n            next();\n        }\n    };\n};","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/RestClient.js":"/**\n @module RestClient\n\n This module presents a higher-level API for interacting with resources\n in the Twilio REST API.  Tries to map very closely to the resource structure\n of the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio REST API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: api.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: 2010-04-01)\n */\nfunction RestClient(sid, tkn, options) {\n    options = options || {};\n    RestClient.super_.call(this, sid, tkn, options.host, options.apiVersion, options.timeout);\n\n    //REST Resource - shorthand for just \"account\" and \"accounts\" to match the REST API\n    var accountResource = require('./resources/Accounts')(this);\n    this.accounts = accountResource;\n\n    //mix the account object in with the client object - assume master account for resources\n    _.extend(this,accountResource);\n\n    //Messaging shorthand\n    this.sendSms = this.accounts.sms.messages.post;\n    this.sendMms = this.accounts.messages.post;\n    this.sendMessage = this.accounts.messages.post;\n    this.listSms = this.accounts.sms.messages.get;\n    this.listMessages = this.accounts.messages.get;\n    this.getSms = function(messageSid, callback) {\n        this.accounts.sms.messages(messageSid).get(callback);\n    };\n    this.getMessage = function(messageSid, callback) {\n        this.accounts.messages(messageSid).get(callback);\n    };\n\n\n    //Calls shorthand\n    this.makeCall = this.accounts.calls.post;\n    this.listCalls = this.accounts.calls.get;\n    this.getCall = function(callSid, callback) {\n        this.accounts.calls(callSid).get(callback);\n    };\n}\n\nutil.inherits(RestClient, Client);\n\nRestClient.prototype.request = function(options, callback) {\n    var client = this;\n\n    // Force .json for Coke Classic API\n    options.url = options.url + '.json';\n    return RestClient.super_.prototype.request.call(this, options, callback);\n};\n\nmodule.exports = RestClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/Client.js":"//Dependencies\nvar Q = require('q');\nvar querystring = require('querystring');\nvar request = require('request');\nvar moduleinfo = require('../package.json');\nvar _ = require('underscore');\n\n//REST API Config Defaults\nvar defaultHost = 'api.twilio.com';\nvar defaultApiVersion = '2010-04-01';\n\nfunction Client(sid, tkn, host, api_version, timeout) {\n    //Required client config\n    if (!sid || !tkn) {\n        if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {\n            this.accountSid = process.env.TWILIO_ACCOUNT_SID;\n            this.authToken = process.env.TWILIO_AUTH_TOKEN;\n        }\n        else {\n            throw 'Client requires an Account SID and Auth Token set explicitly ' +\n                'or via the TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN environment variables';\n        }\n    }\n    else {\n        //if auth token/SID passed in manually, trim spaces\n        this.accountSid = sid.replace(/ /g, '');\n        this.authToken = tkn.replace(/ /g, '');\n    }\n\n    //Optional client config\n    this.host = host || defaultHost;\n    this.apiVersion = api_version || defaultApiVersion;\n    this.timeout = timeout || 31000; // request timeout in milliseconds\n}\n\n//process data and make available in a more JavaScripty format\nfunction processKeys(source) {\n    if (_.isObject(source)) {\n        Object.keys(source).forEach(function(key) {\n\n            if (key === 'total' || key === 'last_page_uri' || key === 'num_pages') {\n                delete source[key];\n            }\n\n            //Supplement underscore values with camel-case\n            if (key.indexOf('_') > 0) {\n                var cc = key.replace(/_([a-z])/g, function (g) {\n                    return g[1].toUpperCase()\n                });\n                source[cc] = source[key];\n            }\n\n            //process any nested arrays...\n            if (Array.isArray(source[key])) {\n                source[key].forEach(processKeys);\n            }\n            else if (_.isObject(source[key])) {\n                processKeys(source[key]);\n            }\n        });\n\n        //Look for and convert date strings for specific keys\n        ['startDate', 'endDate', 'dateCreated', 'dateUpdated', 'startTime', 'endTime', 'dateSent'].forEach(function(dateKey) {\n            if (source[dateKey]) {\n                source[dateKey] = new Date(source[dateKey]);\n            }\n        });\n    }\n}\n\n/**\n Get the base URL which we'll use for all requests with this client\n\n @returns {string} - the API base URL\n */\nClient.prototype.getBaseUrl = function () {\n    return 'https://' + this.accountSid + ':' + this.authToken + '@' + this.host + '/' + this.apiVersion;\n};\n\n\n/**\n Make an authenticated request against the Twilio backend. Uses the request\n library, and largely passes through to its API for options:\n\n https://github.com/mikeal/request\n\n @param {object} options - options for HTTP request\n @param {function} callback - callback function for when request is complete\n - @param {object} error - an error object if there was a problem processing the request\n - @param {object} data - the JSON-parsed data\n - @param {http.ClientResponse} response - the raw node http.ClientResponse object\n */\nClient.prototype.request = function (options, callback) {\n    var client = this;\n    var deferred = Q.defer();\n\n    //Prepare request options\n    // Add base URL if we weren't given an absolute one\n    if (!options.url.indexOf('http') !== 0) {\n        options.url = client.getBaseUrl() + options.url;\n    }\n    options.headers = {\n        'Accept':'application/json',\n        'Accept-Charset': 'utf-8',\n        'User-Agent':'twilio-node/' + moduleinfo.version\n    };\n    options.timeout = client.timeout;\n\n    // Manually create POST body if there's a form object. Sadly, request\n    // turns multiple key parameters into array-ified queries, like this:\n    // MediaUrl[0]=foo&MediaUrl[1]=bar. Node querystring does the right thing so\n    // we use that here. Also see https://github.com/mikeal/request/issues/644\n    if (options.form) {\n        options.body = querystring.stringify(options.form).toString('utf-8');\n        options.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';\n        options.form = null;\n    }\n\n    //Initiate HTTP request\n    request(options, function (err, response, body) {\n        var data;\n        try {\n            if (err) {\n                data = err;\n            } else {\n                data = body ? JSON.parse(body) : null;\n            }\n        } catch (e) {\n            data = { status: 500, message: (e.message || 'Invalid JSON body') };\n        }\n\n        //request doesn't think 4xx is an error - we want an error for any non-2xx status codes\n        var error = null;\n        if (err || (response && (response.statusCode < 200 || response.statusCode > 206))) {\n            error = {};\n            // response is null if server is unreachable\n            if (response) {\n                error.status = response.statusCode;\n                error.message = data ? data.message : 'Unable to complete HTTP request';\n                error.code = data && data.code;\n                error.moreInfo = data && data.more_info;\n            } else {\n                error.status = err.code;\n                error.message = 'Unable to reach host: \"'+client.host+'\"';\n            }\n        }\n\n        // JavaScriptify properties of response if it exists\n        data && processKeys(data);\n\n        //hang response off the JSON-serialized data, as unenumerable to allow for stringify.\n        data && Object.defineProperty(data, 'nodeClientResponse', {\n            value: response,\n            configurable: true,\n            writeable: true,\n            enumerable: false\n        });\n\n        // Resolve promise\n        if (error) {\n            deferred.reject(error);\n        } else {\n            deferred.resolve(data);\n        }\n\n    });\n\n    // Return promise, but also support original node callback style\n    return deferred.promise.nodeify(callback);\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/IpMessagingClient.js":"/**\n @module IpMessagingClient\n\n This module presents a higher-level API for interacting with resources in the\n Twilio Ip Messaging API.  Tries to map very closely to the resource structure of\n the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio Ip Messaging API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: ip-messaging.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: v1)\n */\nfunction IpMessagingClient(sid, tkn, options) {\n    options = options || {};\n    IpMessagingClient.super_.call(\n        this, sid, tkn, \n        options.host || 'ip-messaging.twilio.com', \n        options.apiVersion || 'v1', \n        options.timeout\n    );\n\n    var servicesResource = require('./resources/ip_messaging/Services')(this);\n    this.services = servicesResource;\n\n    var credentialsResource = require('./resources/ip_messaging/Credentials')(this);\n    this.credentials = credentialsResource;\n}\n\nutil.inherits(IpMessagingClient, Client);\n\nmodule.exports = IpMessagingClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/PricingClient.js":"/**\n @module PricingClient\n\n This module presents a higher-level API for interacting with resources in the\n Twilio Pricing API.  Tries to map very closely to the resource structure of\n the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio Pricing API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: pricing.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: v1)\n */\nfunction PricingClient(sid, tkn, options) {\n    options = options || {};\n    PricingClient.super_.call(this, sid, tkn, options.host || 'pricing.twilio.com', options.apiVersion || 'v1', options.timeout);\n\n    var voiceResource = require('./resources/pricing/Voice')(this);\n    this.voice = voiceResource;\n\n    var phoneNumbersResource = require('./resources/pricing/PhoneNumbers')(this);\n    this.phoneNumbers = phoneNumbersResource;\n\n    var messagingResource = require('./resources/pricing/Messaging')(this);\n    this.messaging = messagingResource;\n}\n\nutil.inherits(PricingClient, Client);\n\nmodule.exports = PricingClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/MonitorClient.js":"/**\n @module MonitorClient\n\n This module presents a higher-level API for interacting with resources\n in the Twilio Monitor API.  Tries to map very closely to the resource structure\n of the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio Monitor API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: monitor.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: v1)\n */\nfunction MonitorClient(sid, tkn, options) {\n    //Required client config\n    options = options || {};\n    MonitorClient.super_.call(this, sid, tkn, options.host || 'monitor.twilio.com', options.apiVersion || 'v1', options.timeout);\n\n    //REST Resource - shorthand for just \"event\" and \"events\" to match the REST API\n    var eventResource = require('./resources/monitor/Events')(this);\n    this.events = eventResource;\n    var alertResource = require('./resources/monitor/Alerts')(this);\n    this.alerts = alertResource;\n\n    //mix the account object in with the client object - assume master account for resources\n    _.extend(this, eventResource);\n    _.extend(this, alertResource);\n}\n\nutil.inherits(MonitorClient, Client);\n\nmodule.exports = MonitorClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TaskRouterClient.js":"/**\n @module TaskRouterClient\n\n This module presents a higher-level API for interacting with resources\n in the Twilio TaskRouter API.  Tries to map very closely to the resource structure\n of the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio TaskRouter API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: taskrouter.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: v1)\n */\nfunction TaskRouterClient(sid, tkn, workspaceSid, options) {\n    //Required client config\n    if (!workspaceSid) {\n        if (process.env.TWILIO_WORKSPACE_SID) {\n            this.workspaceSid = process.env.TWILIO_WORKSPACE_SID;\n        }\n        else {\n            throw 'Client requires a Workspace SID set explicitly or via the TWILIO_WORKSPACE_SID environment variables';\n        }\n    }\n    else {\n        //trim spaces\n        this.workspaceSid = workspaceSid.replace(/ /g, '');\n    }\n    options = options || {};\n    TaskRouterClient.super_.call(this, sid, tkn, options.host || 'taskrouter.twilio.com', options.apiVersion || 'v1', options.timeout);\n\n    //REST Resource - shorthand for just \"workspace\" and \"workspaces\" to match the REST API\n    var workspaceResource = require('./resources/task_router/Workspaces')(this);\n    this.workspaces = workspaceResource;\n    this.workspace = workspaceResource(this.workspaceSid);\n\n    //mix the account object in with the client object - assume master account for resources\n    _.extend(this, workspaceResource);\n}\n\nutil.inherits(TaskRouterClient, Client);\n\nmodule.exports = TaskRouterClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/LookupsClient.js":"/**\n @module LookupsClient\n\n This module presents a higher-level API for interacting with resources\n in the Twilio Lookups API.  Tries to map very closely to the resource structure\n of the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\n/**\n The Twilio Lookups API client\n @constructor\n @param {string} sid - The application SID, as seen in the Twilio portal\n @param {string} tkn - The auth token, as seen in the Twilio portal\n @param {object} options (optional) - optional config for the REST client\n - @member {string} host - host for the Twilio API (default: lookups.twilio.com)\n - @member {string} apiVersion - the Twilio REST API version to use for requests (default: v1)\n */\nfunction LookupsClient(sid, tkn, options) {\n    //Required client config\n    options = options || {};\n    LookupsClient.super_.call(this, sid, tkn, options.host || 'lookups.twilio.com', options.apiVersion || 'v1', options.timeout);\n\n    var phoneNumbersResource = require('./resources/lookups/PhoneNumbers')(this);\n    this.phoneNumbers = phoneNumbersResource;\n}\n\nutil.inherits(LookupsClient, Client);\n\nmodule.exports = LookupsClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TrunkingClient.js":"/**\n @module Trunking\n\n This module presents a higher-level API for interacting with resources in the\n Twilio Trunking API.  Tries to map very closely to the resource structure of\n the actual Twilio API, while still providing a nice JavaScript interface.\n */\n\n//Dependencies\nvar _ = require('underscore');\nvar Client = require('./Client');\nvar util = require('util');\n\nfunction TrunkingClient(sid, tkn, options) {\n    options = options || {};\n    TrunkingClient.super_.call(\n        this, sid, tkn, \n        options.host || 'trunking.twilio.com', \n        options.apiVersion || 'v1', \n        options.timeout\n    );\n\n    var trunkResource = require('./resources/trunking/Trunks')(this);\n    this.trunks = trunkResource;\n}\n\nutil.inherits(TrunkingClient, Client);\nmodule.exports = TrunkingClient;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/AccessToken.js":"var _ = require('underscore');\nvar jwt = require('jsonwebtoken');\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.serviceSid - The service unique ID\n * @param {string} options.endpointId - The endpoint ID\n * @param {string} options.deploymentRoleSid - SID of the deployment role to be\n *                 assigned to the user\n * @param {string} options.pushCredentialSid - The Push Credentials SID\n */\nfunction IpMessagingGrant(options) {\n  options = options || {};\n  this.serviceSid = options.serviceSid;\n  this.endpointId = options.endpointId;\n  this.deploymentRoleSid = options.deploymentRoleSid;\n  this.pushCredentialSid = options.pushCredentialSid;\n}\n\n_.extend(IpMessagingGrant.prototype, {\n  key: 'ip_messaging',\n\n  toPayload: function() {\n    var grant = {};\n    if (this.serviceSid) { grant.service_sid = this.serviceSid; }\n    if (this.endpointId) { grant.endpoint_id = this.endpointId; }\n    if (this.deploymentRoleSid) {\n      grant.deployment_role_sid = this.deploymentRoleSid;\n    }\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    return grant;\n  }\n});\n\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.configurationProfileSid - The configuration\n *                 profile unique ID\n */\nfunction ConversationsGrant(options) {\n  options = options || {};\n  this.configurationProfileSid = options.configurationProfileSid;\n}\n\n_.extend(ConversationsGrant.prototype, {\n  key: 'rtc',\n  toPayload: function() {\n    var grant = {};\n    if (this.configurationProfileSid) {\n      grant.configuration_profile_sid = this.configurationProfileSid;\n    }\n    return grant;\n  }\n});\n\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.configurationProfileSid - The configuration\n *                 profile unique ID\n */\nfunction VideoGrant(options) {\n  options = options || {};\n  this.configurationProfileSid = options.configurationProfileSid;\n}\n\n_.extend(VideoGrant.prototype, {\n  key: 'video',\n  toPayload: function() {\n    var grant = {};\n    if (this.configurationProfileSid) {\n      grant.configuration_profile_sid = this.configurationProfileSid;\n    }\n    return grant;\n  }\n});\n\n\n/**\n * @constructor\n * @param {object} options - ...\n * @param {string} options.outgoingApplicationSid - application sid to call when placing outgoing call\n * @param {object} options.outgoingApplicationParams - request params to pass to the application\n * @param {string} options.pushCredentialSid - Push Credential Sid to use when registering to receive incoming call notifications\n * @param {string} options.endpointId - Specify an endpoint identifier for this device, which will allow the developer\n *                 to direct calls to a specific endpoint when multiple devices are associated with a single identity\n */\nfunction VoiceGrant(options) {\n  options = options || {};\n  this.outgoingApplicationSid = options.outgoingApplicationSid;\n  this.outgoingApplicationParams = options.outgoingApplicationParams;\n  this.pushCredentialSid = options.pushCredentialSid;\n  this.endpointId = options.endpointId;\n}\n\n_.extend(VoiceGrant.prototype, {\n  key: 'voice',\n  toPayload: function() {\n    var grant = {};\n    if (this.outgoingApplicationSid) {\n      grant.outgoing = {};\n      grant.outgoing.application_sid = this.outgoingApplicationSid;\n\n      if (this.outgoingApplicationParams) {\n        grant.outgoing.params = this.outgoingApplicationParams;\n      }\n    }\n\n    if (this.pushCredentialSid) {\n      grant.push_credential_sid = this.pushCredentialSid;\n    }\n    if (this.endpointId) {\n      grant.endpoint_id = this.endpointId;\n    }\n    return grant;\n  }\n});\n\n/**\n * @constructor\n * @param {string} accountSid - The account's unique ID to which access is scoped\n * @param {string} keySid - The signing key's unique ID\n * @param {string} secret - The secret to sign the token with\n * @param {object} opts - ...\n * @param {number} [opts.ttl=3600] - Time to live in seconds\n * @param {string} [opts.identity] - The identity of the first person\n * @param {number} [opts.nbf] - Time from epoch in seconds for not before value\n */\nfunction AccessToken(accountSid, keySid, secret, opts) {\n  if (!accountSid) { throw new Error('accountSid is required'); }\n  if (!keySid) { throw new Error('keySid is required'); }\n  if (!secret) { throw new Error('secret is required'); }\n  opts = opts || {};\n\n  this.accountSid = accountSid;\n  this.keySid = keySid;\n  this.secret = secret;\n  this.ttl = opts.ttl || 3600;\n  this.identity = opts.identity;\n  this.nbf = opts.nbf;\n  this.grants = [];\n}\n\n// Class level properties\nAccessToken.IpMessagingGrant = IpMessagingGrant;\nAccessToken.ConversationsGrant = ConversationsGrant;\nAccessToken.VoiceGrant = VoiceGrant;\nAccessToken.VideoGrant = VideoGrant;\nAccessToken.DEFAULT_ALGORITHM = 'HS256';\nAccessToken.ALGORITHMS = [\n  'HS256',\n  'HS384',\n  'HS512'\n];\n\n_.extend(AccessToken.prototype, {\n  addGrant: function(grant) {\n    this.grants.push(grant);\n  },\n\n  toJwt: function(algorithm) {\n    algorithm = algorithm || AccessToken.DEFAULT_ALGORITHM;\n    if (!_.contains(AccessToken.ALGORITHMS, algorithm)) {\n      throw new Error('Algorithm not supported. Allowed values are ' +\n        AccessToken.ALGORITHMS.join(', '));\n    }\n\n    var grants = {};\n    if (_.isString(this.identity)) { grants.identity = this.identity; }\n\n    _.each(this.grants, function(grant) {\n      grants[grant.key] = grant.toPayload();\n    });\n\n    var now = Math.floor(Date.now() / 1000);\n    var payload = {\n      jti: this.keySid + '-' + now,\n      grants: grants\n    };\n    if (_.isNumber(this.nbf)) { payload.nbf = this.nbf; }\n\n    return jwt.sign(payload, this.secret, {\n      headers: {\n        cty: 'twilio-fpa;v=1',\n        typ: 'JWT'\n      },\n      algorithm: algorithm,\n      issuer: this.keySid,\n      subject: this.accountSid,\n      expiresIn: this.ttl\n    });\n  }\n});\n\nmodule.exports = AccessToken;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/Capability.js":"var jwt = require('jsonwebtoken'),\n    qs = require('querystring'),\n    utils = require('./utils');\n\nfunction Capability(sid, tkn) {\n    if(!(this instanceof Capability)) {\n      return new Capability(sid, tkn);\n    }\n\n    utils.initializeTokens(this, 'Capability', sid, tkn);\n    this.capabilities = [];\n}\n\nfunction scopeUriFor(service, privilege, params) {\n    var scopeUri = 'scope:'+service+':'+privilege;\n    if (params) {\n        scopeUri = scopeUri+'?'+qs.stringify(params);\n    }\n    return scopeUri;\n}\n\nCapability.prototype.allowClientIncoming = function(clientName) {\n    this.clientName = clientName;\n    this.capabilities.push(scopeUriFor('client', 'incoming', {\n        clientName:clientName\n    }));\n\n    return this;\n};\n\nCapability.prototype.allowClientOutgoing = function(appSid, params) {\n    this.outgoingScopeParams = {\n        appSid:appSid\n    };\n\n    if (params) {\n        this.outgoingScopeParams.appParams = qs.stringify(params);\n    }\n\n    return this;\n};\n\nCapability.prototype.allowEventStream = function(filters) {\n    var scopeParams = {\n        path:'/2010-04-01/Events'\n    };\n\n    if (filters) {\n        scopeParams.params = filters;\n    }\n\n    this.capabilities.push(scopeUriFor('stream', 'subscribe', scopeParams));\n    return this;\n};\n\nCapability.prototype.generate = function(timeout) {\n    var capabilities = this.capabilities.slice(0),\n        expires = timeout||3600;\n\n    //Build outgoing scope params lazily to use clientName (if it exists)\n    if (this.outgoingScopeParams) {\n        if (this.clientName) {\n            this.outgoingScopeParams.clientName = this.clientName;\n        }\n        capabilities.push(scopeUriFor('client', 'outgoing', this.outgoingScopeParams));\n    }\n\n    var payload = {\n        scope: capabilities.join(' '),\n        iss: this.accountSid,\n        exp: Math.floor(new Date() / 1000) + expires\n    };\n\n    return jwt.sign(payload, this.authToken);\n};\n\nmodule.exports = Capability;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/utils.js":"exports.initializeTokens = function (obj, type, sid, tkn){\n    // Initialize from environment variables, if present\n    if (!sid || !tkn) {\n        if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {\n            obj.accountSid = process.env.TWILIO_ACCOUNT_SID;\n            obj.authToken = process.env.TWILIO_AUTH_TOKEN;\n        }\n        else {\n            throw type + ' requires an Account SID and Auth Token set explicitly ' +\n                'or via the TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN environment variables';\n        }\n    }\n    else {\n        //if auth token/SID passed in manually, trim spaces\n        obj.accountSid = sid.trim();\n        obj.authToken = tkn.trim();\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TaskRouterCapability.js":"var jwt = require('jsonwebtoken');\nvar deprecate = require('deprecate');\nvar _ = require('underscore')\nrequire('string.prototype.startswith');\n\nvar taskRouterUrlBase = 'https://taskrouter.twilio.com';\nvar taskRouterVersion = 'v1';\nvar eventUrlBase = 'https://event-bridge.twilio.com/v1/wschannels';\n\nfunction TaskRouterCapability(accountSid, authToken, workspaceSid, channelId) {\n    this.accountSid = accountSid;\n    this.authToken = authToken;\n    this.policies = [];\n\n    this.workspaceSid = workspaceSid;\n    this.channelId = channelId;\n\n    this._baseUrl = taskRouterUrlBase + '/' + taskRouterVersion + '/Workspaces/' + this.workspaceSid;\n\n    this._validateJWT();\n\n    this._setupResource();\n\n    var eventsUrl = eventUrlBase + '/' + this.accountSid + '/' + channelId;\n\n    // add permissions to GET and POST to the event-bridge channel\n    this.allow(eventsUrl, 'GET');\n    this.allow(eventsUrl, 'POST');\n\n    // add permission to fetch the instance resource\n    this.allow(this._resourceUrl, 'GET');\n}\n\nTaskRouterCapability.prototype._setupResource = function() {\n    if(this.channelId.startsWith('WS')) {\n        this._resourceUrl = this._baseUrl;\n    }else if(this.channelId.startsWith('WK')) {\n        this._resourceUrl = this._baseUrl + '/Workers/' + this.channelId;\n\n        var activityUrl = this._baseUrl + '/Activities';\n        this.allow(activityUrl, \"GET\");\n\n        var tasksUrl = this._baseUrl + '/Tasks/**';\n        this.allow(tasksUrl, \"GET\");\n\n        var workerReservationsUrl = this._resourceUrl + '/Reservations/**';\n        this.allow(workerReservationsUrl, \"GET\");\n\n    }else if(this.channelId.startsWith('WQ')) {\n        this._resourceUrl = this._baseUrl + '/TaskQueues/' + this.channelId;\n    }\n}\n\nTaskRouterCapability.prototype._validateJWT = function() {\n    if(!this.accountSid || !this.accountSid.startsWith('AC')) {\n        throw \"Invalid AccountSid provided: \"+this.accountSid;\n    }\n    if(!this.workspaceSid || !this.workspaceSid.startsWith('WS')) {\n        throw \"Invalid WorkspaceSid provided: \"+this.workspaceSid;\n    }\n    if(!this.channelId) {\n        throw \"ChannelId not provided\";\n    }\n    var prefix = this.channelId.substring(0,2);\n    if(prefix != 'WS' && prefix != 'WK' && prefix != 'WQ') {\n        throw \"Invalid ChannelId provided: \"+this.channelId;\n    }\n}\n\nTaskRouterCapability.prototype.allowFetchSubresources = function() {\n    this.allow(this._resourceUrl+'/**', 'GET');\n}\n\nTaskRouterCapability.prototype.allowUpdates = function() {\n    this.allow(this._resourceUrl, 'POST');\n}\n\nTaskRouterCapability.prototype.allowUpdatesSubresources = function() {\n    this.allow(this._resourceUrl+'/**', 'POST');\n}\n\nTaskRouterCapability.prototype.allowDelete = function() {\n    this.allow(this._resourceUrl, 'DELETE');\n}\n\nTaskRouterCapability.prototype.allowDeleteSubresources = function() {\n    this.allow(this._resourceUrl+'/**', 'DELETE');\n}\n\nTaskRouterCapability.prototype.allowDeleteSubresources = function() {\n    this.allow(this._resourceUrl+'/**', 'DELETE');\n}\n\nTaskRouterCapability.prototype.allowWorkerActivityUpdates = function() {\n    if(this.channelId.startsWith('WK')) {\n        deprecate('allowWorkerActivityUpdates is deprecated. Please use TaskRouterWorkerCapability.allowWorkerActivityUpdates() instead');\n        this.allow(this._resourceUrl, 'POST', {}, {\"ActivitySid\": {'required': true}});\n    }else {\n        throw \"Deprecated function not applicable to non Worker\";\n    }\n}\n\nTaskRouterCapability.prototype.allowWorkerFetchAttributes = function() {\n    if(this.channelId.startsWith('WK')) {\n        deprecate('allowWorkerFetchAttributes is deprecated. Please use TaskRouterWorkerCapability; added automatically in constructor');\n        this.allow(this._resourceUrl, 'GET');\n    }else {\n        throw \"Deprecated function not applicable to non Worker\";\n    }\n}\n\nTaskRouterCapability.prototype.allowTaskReservationUpdates = function() {\n    if(this.channelId.startsWith('WK')) {\n        deprecate('allowTaskReservationUpdates is deprecated. Please use TaskRouterWorkerCapability.allowReservationUpdates() instead');\n        this.allow(this._baseUrl + \"/Tasks/**\", \"POST\");\n    }else {\n        throw \"Deprecated function not applicable to non Worker\";\n    }\n}\n\nTaskRouterCapability.prototype.addPolicy = function(url, method, allowed, queryFilter, postFilter) {\n    var policy = {\n        url: url,\n        method: method\n    };\n\n    if (queryFilter) {\n        policy.query_filter = queryFilter;\n    } else {\n        policy.query_filter = {};\n    }\n\n    if (postFilter) {\n        policy.post_filter = postFilter;\n    } else {\n        policy.post_filter = {};\n    }\n\n    if (typeof allowed !== 'undefined') {\n        policy.allow = allowed;\n    } else {\n        policy.allow = true;\n    }\n    this.policies.push(policy);\n}\n\nTaskRouterCapability.prototype.allow = function(url, method, queryFilter, postFilter) {\n    this.addPolicy(url, method, true, queryFilter, postFilter);\n}\n\nTaskRouterCapability.prototype.deny = function(url, method, queryFilter, postFilter) {\n    this.addPolicy(url, method, false, queryFilter, postFilter);\n}\n\nTaskRouterCapability.prototype.generate = function(ttl) {\n    var taskRouterAttributes = {\n        'account_sid': this.accountSid,\n        'channel': this.channelId,\n        'workspace_sid': this.workspaceSid\n    }\n\n    if(this.channelId.startsWith('WK')) {\n        taskRouterAttributes.worker_sid = this.channelId;\n    }else if(this.channelId.startsWith('WQ')) {\n        taskRouterAttributes.taskqueue_sid = this.channelId;\n    }\n\n    return this._generate(ttl, taskRouterAttributes);\n}\n\nTaskRouterCapability.prototype._generate = function(ttl, extraAttributes) {\n    var payload = {\n        iss: this.accountSid,\n        exp: (Math.floor(new Date() / 1000) + (ttl || 3600)),\n        version: taskRouterVersion,\n        friendly_name: this.channelId,\n        policies: this.policies,\n    };\n    _.extend(payload, extraAttributes);\n    return jwt.sign(payload, this.authToken);\n}\n\nmodule.exports = TaskRouterCapability;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TaskRouterWorkerCapability.js":"var inherits = require('util').inherits;\nvar TaskRouterCapability = require('./TaskRouterCapability');\n\nfunction TaskRouterWorkerCapability(accountSid, authToken, workspaceSid, workerSid) {\n    TaskRouterCapability.call(this, accountSid, authToken, workspaceSid, workerSid);\n\n    this.reservationsUrl = this._baseUrl + \"/Tasks/**\";\n    this.activityUrl = this._baseUrl + \"/Activities\";\n    this.workerReservationsUrl = this._resourceUrl + \"/Reservations/**\";\n\n    // add permissions fo fetch the list of activities, tasks and worker reservations\n    this.allow(this.activityUrl, \"GET\");\n    this.allow(this.reservationsUrl, \"GET\");\n    this.allow(this.workerReservationsUrl, \"GET\");\n}\ninherits(TaskRouterWorkerCapability, TaskRouterCapability);\n\nTaskRouterWorkerCapability.prototype._setupResource = function() {\n    this._resourceUrl = this._baseUrl + '/Workers/' + this.channelId;\n}\n\nTaskRouterWorkerCapability.prototype.allowActivityUpdates = function() {\n    this.allow(\n        this._resourceUrl, \n        \"POST\",\n        {},\n        {\"ActivitySid\": {'required': true}});\n}\n\nTaskRouterWorkerCapability.prototype.allowReservationUpdates = function() {\n    this.allow(\n        this.reservationsUrl, \n        \"POST\",\n        {},\n        {});\n    this.allow(\n        this.workerReservationsUrl, \n        \"POST\",\n        {},\n        {});\n}\n\nmodule.exports = TaskRouterWorkerCapability;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TaskRouterWorkspaceCapability.js":"var inherits = require('util').inherits;\nvar TaskRouterCapability = require('./TaskRouterCapability');\n\nfunction TaskRouterWorkspaceCapability(accountSid, authToken, workspaceSid) {\n    TaskRouterCapability.call(this, accountSid, authToken, workspaceSid, workspaceSid);\n}\ninherits(TaskRouterWorkspaceCapability, TaskRouterCapability);\n\nTaskRouterWorkspaceCapability.prototype._setupResource = function() {\n    this._resourceUrl = this._baseUrl;\n}\n\nmodule.exports = TaskRouterWorkspaceCapability;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TaskRouterTaskQueueCapability.js":"var inherits = require('util').inherits;\nvar TaskRouterCapability = require('./TaskRouterCapability');\n\nfunction TaskRouterTaskQueueCapability(accountSid, authToken, workspaceSid, taskQueueSid) {\n    TaskRouterCapability.call(this, accountSid, authToken, workspaceSid, taskQueueSid);\n}\ninherits(TaskRouterTaskQueueCapability, TaskRouterCapability);\n\nTaskRouterTaskQueueCapability.prototype._setupResource = function() {\n    this._resourceUrl = this._baseUrl + '/TaskQueues/' + this.channelId;\n}\n\nmodule.exports = TaskRouterTaskQueueCapability;\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/lib/TwimlResponse.js":"var _ = require('underscore');\n\n// Escape XML entites in a given string\nfunction esc(str) {\n    return String(str).replace(/&/g, '&amp;')\n        .replace(/\\\"/g, '&quot;')\n        .replace(/\\'/g, '&apos;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\n//helper to generate a helper function which returns XML node for a given parent\nfunction addTwimlFunction(node, twimlName) {\n    //Generate a function on the parent node\n    node[twimlName.charAt(0).toLowerCase() + twimlName.slice(1)] = function() {\n        var text, attributes, builder, legalNodes = [];\n\n        //Get XML components from the caller\n        for (var i = 0, l = arguments.length; i < l; i++) {\n            var arg = arguments[i];\n            if (typeof arg === 'string') {\n                text = arg;\n            } else if (typeof arg === 'function') {\n                builder = arg;\n            } else {\n                attributes = arg;\n            }\n        }\n\n        //determine legal sub-nodes based on the node name\n        switch(twimlName) {\n            case 'Gather': legalNodes = ['Say','Play','Pause']; break;\n            case 'Dial': legalNodes = ['Number','Client','Conference','Queue','Sip']; break;\n            case 'Message': legalNodes = ['Media', 'Body']; break;\n            case 'Enqueue': legalNodes = ['Task']; break;\n            default: break;\n        }\n\n        //create new node object\n        var newNode = new Node({\n            name:twimlName,\n            attributes:attributes,\n            text:text,\n            legalNodes:legalNodes\n        });\n\n        //create node's API for subnodes and call builder function, if need be\n        if (!text && legalNodes.length > 0 && builder) {\n            legalNodes.forEach(function(legalNodeName) {\n                addTwimlFunction(newNode, legalNodeName);\n            });\n            builder.call(newNode, newNode);\n        }\n\n        //Assemble the proper XML node and add to parent node\n        node.children.push(newNode);\n\n        //return the node, to allow for chaining\n        return node;\n    };\n}\n\n/**\n A TwiML response node - nestable with other TwiML nodes\n\n @param {object} config - options for HTTP request\n - name {string}: name of this node\n - attributes {object}: key-value pairs for XML attributes for this node\n - text {string}: text content, if any, for this node\n - topLevel {boolean}: indicates a top level node which should also print an XML instruction\n - legalNodes {array<string>}: a list of child functions which should be allowable for this node\n */\nfunction Node(config) {\n    _.extend(this,config);\n    this.children = [];\n\n    //create child adder functions based on legal nodes\n    var that = this;\n    this.legalNodes.forEach(function(val) {\n        addTwimlFunction(that,val);\n    });\n}\n\n//Output the contents of this XML node as a string\nNode.prototype.toString = function() {\n    var buffer = [];\n    if (this.topLevel) {\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\n    }\n\n    //Start node\n    buffer.push('<'+this.name);\n\n    //handle attributes\n    for (var attr in this.attributes) {\n        buffer.push(' ' + attr + '=\"' + esc(this.attributes[attr]) + '\"');\n    }\n\n    //Close start tag\n    buffer.push('>');\n\n    //process contents of tag\n    if (this.text) {\n        buffer.push(esc(this.text));\n    } else {\n        //process child tags\n        for (var i = 0, l = this.children.length; i < l; i++) {\n            buffer.push(this.children[i]);\n        }\n    }\n\n    //close tag\n    buffer.push('</'+this.name+'>');\n\n    return buffer.join('');\n};\n\n//Public interface is a Response node with the initial set of TwiML child nodes available\nmodule.exports = function() {\n    return new Node({\n        topLevel:true,\n        name:'Response',\n        legalNodes:['Say', 'Play', 'Gather', 'Record', 'Sms', 'Dial', 'Enqueue', 'Task', 'Leave', 'Hangup', 'Redirect', 'Reject', 'Pause', 'Message']\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/config.sample.js":"//Configuration for running tests and examples against the Twilio API\nmodule.exports = {\n    accountSid:'ACXXX',\n    authToken:'XXX',\n    from:'+16512223333', //The Twilio number you've bought or configured\n    to:'+16513334444' //The number you would like to send messages to for testing\n};","/home/travis/build/npmtest/node-npmtest-twilio/node_modules/twilio/index.js":"module.exports = require('./lib');"}